// Generated by CoffeeScript 1.10.0
(function() {
  var _, app, audience, connections, express, http, io, speaker, title;

  express = require('express');

  app = express();

  http = require('http').Server(app);

  io = require('socket.io')(http);

  _ = require('lodash');

  connections = [];

  title = 'Untitled Presentation';

  audience = [];

  speaker = {};

  app.use(express["static"]('./public'));

  app.use(express["static"]('./node_modules/bootstrap/dist'));

  io.on('connection', function(socket) {
    socket.once('disconnect', function() {
      var member;
      member = _.findWhere(audience, {
        id: this.id
      });
      if (member) {
        audience.splice(audience.indexOf(member), 1);
        io.emit('audience', audience);
        console.log('left: %s ( %s audience members )', member.name, audience.length);
      }
      connections.splice(connections.indexOf(socket), 1);
      socket.disconnect();
      return console.log('Disconnected: %s sockets remaining', connections.length);
    });
    socket.on('join', function(payload) {
      var newMember;
      newMember = {
        id: this.id,
        name: payload.name,
        type: 'member'
      };
      this.emit('joined', newMember);
      audience.push(newMember);
      io.emit('audience', audience);
      return console.log('Audience joined %s', payload.name);
    });
    socket.on('start', function(payload) {
      speaker.name = payload.name;
      speaker.id = this.id;
      speaker.type = 'speaker';
      this.emit('joined', speaker);
      io.emit('start', {
        title: title,
        speaker: speaker
      });
      return console.log('Presentation started: "%s" by %sd', title, speaker.name);
    });
    socket.emit('welcome', {
      title: title,
      audience: audience,
      speaker: speaker.name
    });
    connections.push(socket);
    return console.log("Connected: %s sockets connected", connections.length);
  });

  http.listen(3000, function(err) {
    if (err) {
      return console.log(err);
    } else {
      return console.log('Server listening at port 3000');
    }
  });

}).call(this);

//# sourceMappingURL=app-server.js.map
